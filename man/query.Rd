% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query.R
\name{projects}
\alias{projects}
\alias{schema}
\alias{fields}
\alias{values}
\alias{query_graphql}
\title{Discover and query Gen3 resources}
\usage{
projects()

schema(as = c("brief", "full"))

fields(type_name, as = c("brief", "full"))

values(type_name, ..., .n = 10)

query_graphql(query)
}
\arguments{
\item{as}{for \code{fields()}, \code{"brief"} returns fields that do not start with
an underscore. \code{"full"} returns all fields.}

\item{type_name}{\code{character(1)} name of the type to be queried.}

\item{...}{\code{character(1)} field(s) to be queried.}

\item{.n}{integer(1) number of records to retieve. The special
value \code{.n = 0} retrieves all records.}

\item{query}{character(1) valid graphql query to be evaluated by
the database.}
}
\value{
\code{projects()} returns a tibble with project_id, id, and
study_description. There are as many rows as there are projects
accessbile to the current user.

\code{schema()} returns a tibble with with a single columm
(\code{"name"}) corresponding to the type names available in Gen3.

\code{fields()} returns a tibble with columns \code{type_name} and
\code{field} (name of corresponding fields in type name).

\code{values()} returns a tibble with type_name and field names
as columns, with one row for each record queried.

\code{query_graphql()} returns JSON-like list-of-lists following
the structure of the query, but with terminal data.frame-like
collections simplified to a tibbles.
}
\description{
\code{projects()} returns projects available to the
currently authenticated user

\code{schema()} returns all type names (objects) defined in
the Gen3 schema. Type names form the basis of queries.

\code{fields()} returns fields defined on the type name. A
field has associated values that can be retrieved by queries.

\code{values()} returns values corresponding to fields of
\code{type_name}. Each row represents a record in the database.

\code{query_graphql()} allows arbitrary queries against the
graphql database.
}
\examples{
## Authenticate first
cache <- tools::R_user_dir("Gen3", "cache")
credentials <- file.path(cache, "credentials.json")

## only run examples if credentials file exists
stopifnot(
    `no credentials file, cannot authenticate` = file.exists(credentials)
)
    
authenticate(credentials)
projects()

schema()

fields("subject")

values("subject", "id", "sex")

query <- '{
    subject(
        project_id: "open_access-1000Genomes"
        first: 0
    ) {
        id
        sex
        population
        submitter_id
    }
}'
result <- query_graphql(query)
result

}
